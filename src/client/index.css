html {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    cursor: default;
    padding: 0;
    margin: 0;
}

body {
    background-color: rgb(196, 143, 0);
    color: white;
    position: fixed;
    font-family: "Comic Sans MS";
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    padding: 0;
    margin: 0;
}

/**
 * Does nothing
 */
div {
    margin: 0;
    padding: 0;
}

/**
 * Container flexbox.
 * Splits body into three parts, .player2.hand, #innergamecontent and .player0.hand
 */
#gamecontent {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: stretch;
}

/**
 * Specify size of .player0.hand
 */
#gamecontent > .player0.hand {
    height: 35%; /* if we change this, also change size of #gamecontent > #innergamecontent > #table > #jassmatwrap */
}

/**
 * Specify size of .player2.hand
 */
#gamecontent > .player2.hand {
    height: 10%; /* if we change this, also change size of #gamecontent > #innergamecontent > #table > #jassmatwrap and #gamecontent > #innergamecontent > .hand:not(.player0) */
    background-color: red;
}

/**
 * Container flexbox.
 * Splits middle part of body into three parts, .player1.hand, #table and .player3.hand
 */
#gamecontent > #innergamecontent {
    flex-grow: 1;
    background-color: green;

    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: stretch;
}

/**
 * Specify size for .player1.hand and .player3.hand (but not .player2.hand)
 */
#gamecontent > #innergamecontent > .hand:not(.player0) {
    width: 10%; /* if we change this, also change size of #gamecontent > #innergamecontent > #table > #jassmatwrap and #gamecontent > .hand:not(.player0) */
    background-color: blue;
}

/**
 * Container flexbox for the table, or just the jassmat in this case.
 * Used to center the jassmat.
 */
#gamecontent > #innergamecontent > #table {
    flex-grow: 1;
    background-color: rgb(196, 143, 0);

    display: flex;
    justify-content: center;
}

/**
 * Container whose width is the smaller of max available width and max available height.
 *
 *     max-width = 55% * viewport.height   // max available height
 *     width = parent.width                // max available width
 *     calculatedWidth = min(width, max-width)
 *
 * The width of this container is the side length of the largest fitting square. We need this length in #jassmatborder.
 */
#gamecontent > #innergamecontent > #table > #jassmatwrap {
    max-width: 55vh;    /* 100vh - ownhand.height - otherhandtop.width */
    width: 100%;
    
    background-color: yellow;

    display: flex;
    align-items: center;
}

/**
 * The maximum size square container that fits into #table.
 * Due to a weirdness in the specification, using percentages in padding-bottom (and top) actually refers to the parent
 * width instead of height. This way, we can "translate" widths to heights.
 * 
 * Essentially, what we want is something like this:
 *
 *     calculatedWidth = calculatedHeight = min(maxAvailableWidth, maxAvailableHeight)
 *
 * While replicating the min function is not particularly hard (by setting both maxWidth and width), feeding it both a
 * width and a height argument turns out to be somewhat tricky, as there are only a few ways to set the height of an
 * element to another element's width. One of the ways to do so is the viewport-based units (vw, vh, vmin and vmax),
 * which allow us to set the width of an element to the height of the entire page. Another is padding-bottom, thanks to
 * the weirdness detailed above. So, essentially, what our CSS does is:
 *     
 *     #jassmatwrap.max-width = 55% * viewport.height
 *     #jassmatwrap.width = #table.calculatedWidth
 *     #jassmatwrap.calculatedWidth = min(#jassmatwrap.width, #jassmatwrap.max-width) // + padding, but that's 0 here
 *     
 *     #jassmatborder.width = 100% * #jassmatwrap.calculatedWidth
 *     #jassmatborder.height = 0
 *     #jassmatborder.padding-bottom = 100% * #jassmatwrap.calculatedWidth
 *     #jassmatborder.calculatedHeight = #jassmatborder.height + #jassmatborder.padding-bottom
 *
 * For reference, another way to achieve the same result is to scale up a 1x1 image (or SVG element).
 */
#gamecontent > #innergamecontent > #table > #jassmatwrap > #jassmatborder {
    position: relative;
    width: 100%;
    padding-bottom: 100%;

    background-color: darkolivegreen;
    border-radius: 20px;
}

/**
 * Border thickness can't be a percentage, so we replicate the behaviour by just creating a slightly smaller and
 * differently colored #jassmat element inside of #jassmatborder.
 */
#jassmat {
    position: absolute;
    top: 2.5%;
    left: 2.5%;
    bottom: 2.5%;
    right: 2.5%;

    background-color: green;
    border-radius: 20px;
}

/**
 * Container div for all cards on the jass mat. We use the following formulas to find the hard-coded values:
 *     #matcardwrap.width = 40% * #jassmat.width
 *     #matcardwrap.height = 178/127 * #matcardwrap.width
 *     #matcardwrap.top = 100% - #matcardwrap.height
 * Note that #jassmat.width == #jassmat.height.
 */
#jassmat > #matcardwrap {
    position: absolute;
    top: 43.93700787%;
    bottom: 0%;
    width: 40%;
    left: 50%;
    transform: translate(-50%, 0%);
}

/**
 * The jass cards on the jass mat. Their rotation origin is the center of the jass mat, which can be determined as
 * follows:
 *     .card.transform-origin-y = (100% - 50% * jassmat.height / #matcardwrap.height) * #matcardwrap.height
 * However, since animations with non-center origin look weird, we instead transform the cards down below in
 * #jassmat .card.playerX.
 *
 * We need to specify left and top coordinates so the animation works.
 */
#jassmat .card {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    transform-origin: 50% 50%;
    transition: 0.52s ease left, 0.52s ease top, 0.52s ease transform, 0.52s linear width, 0.52s linear height;
    z-index: 2;
}

/**
 * Rotations for each of the four players
 */
#jassmat .card.player0 { transform: translateY(-39.18539326%) rotate(0deg) translateY(39.18539326%); }
#jassmat .card.player1 { transform: translateY(-39.18539326%) rotate(-90deg) translateY(39.18539326%); }
#jassmat .card.player2 { transform: translateY(-39.18539326%) rotate(-180deg) translateY(39.18539326%); }
#jassmat .card.player3 { transform: translateY(-39.18539326%) rotate(-270deg) translateY(39.18539326%); }

/**
 * Cards in any hand should have z-index 1
 */
.hand .card {
    z-index: 1;
}

/**
 * The player hand. Flexbox containing .cardholderwrap (centered horizontally)
 */
.player0.hand {
    position: relative;
    width: 100%;
    height: 100%;

    display: flex;
    justify-content: center;
}

/**
 * Container whose width is min(20% * viewport.height, 30 * viewport.width)
 * See #jassmatwrap and #jassmatborder
 */
.player0.hand > .cardholderwrap {
    position: absolute;
    width: 20vh;
    max-width: 30vw;
    height: 100%;
    transform: translate(5%, 0%);
}

/**
 * Container with the size of a card, aspect ratio 127/178 (a card).
 *
 *     calculatedWidth = min(20 * viewport.height, 30 * viewport.width)
 *     calculatedHeight = 178/127 * min(20 * viewport.height, 30 * viewport.width)
 *
 * See #jassmatborder.
 *
 * Additionally, this container is moved up by a bit (10%).
 */
.player0.hand > .cardholderwrap > .cardholder {
    position: absolute;
    bottom: 10%;
    width: 100%;
    padding-bottom: 140.15748%;
}

/**
 * The cards should take the same width as .cardholder, rotate around a point 15% below their bottom center, and not
 * receive the ugly grey frame when tapped on iOS.
 */
.player0.hand .card {
    position: absolute;
    transform-origin: 50% 115%;
    width: 100%;
    height: 100%;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    transition: transform 0.1s;
}

/**
 * If the user hovers over a card, move the underlying image up by 5%.
 */
.player0.hand .card:not(.unselectable):hover > .cardimg {
    transform: translate(0%, -5%);
}

/**
 * Darken out cards that can't be selected
 */
.player0.hand .card.unselectable {
    filter: brightness(0.65);
}

/**
 * Background of each card is the spritesheet. Border radius 3.5%, and a tiny shadow
 */
.card > .cardimg {
    background-color: white;
    background-image: url(assets/sprites/jass/cardset.png);
    background-size: 1000% 400%;
    width: 100%;
    height: 100%;
    border-radius: 3.5%;
    box-shadow: 0px 0px 2px 0px grey;
}




/**
 * Cards
 */
.card.schelle.sechs > .cardimg      { background-position:    0%    0%; }
.card.schelle.sieben > .cardimg     { background-position: -100%    0%; }
.card.schelle.acht > .cardimg       { background-position: -200%    0%; }
.card.schelle.neun > .cardimg       { background-position: -300%    0%; }
.card.schelle.zehn > .cardimg       { background-position: -400%    0%; }
.card.schelle.under > .cardimg      { background-position: -500%    0%; }
.card.schelle.ober > .cardimg       { background-position: -600%    0%; }
.card.schelle.koenig > .cardimg     { background-position: -700%    0%; }
.card.schelle.ass > .cardimg        { background-position: -800%    0%; }

.card.eichel.sechs > .cardimg       { background-position:    0% -100%; }
.card.eichel.sieben > .cardimg      { background-position: -100% -100%; }
.card.eichel.acht > .cardimg        { background-position: -200% -100%; }
.card.eichel.neun > .cardimg        { background-position: -300% -100%; }
.card.eichel.zehn > .cardimg        { background-position: -400% -100%; }
.card.eichel.under > .cardimg       { background-position: -500% -100%; }
.card.eichel.ober > .cardimg        { background-position: -600% -100%; }
.card.eichel.koenig > .cardimg      { background-position: -700% -100%; }
.card.eichel.ass > .cardimg         { background-position: -800% -100%; }

.card.roesle.sechs > .cardimg       { background-position:    0% -200%; }
.card.roesle.sieben > .cardimg      { background-position: -100% -200%; }
.card.roesle.acht > .cardimg        { background-position: -200% -200%; }
.card.roesle.neun > .cardimg        { background-position: -300% -200%; }
.card.roesle.zehn > .cardimg        { background-position: -400% -200%; }
.card.roesle.under > .cardimg       { background-position: -500% -200%; }
.card.roesle.ober > .cardimg        { background-position: -600% -200%; }
.card.roesle.koenig > .cardimg      { background-position: -700% -200%; }
.card.roesle.ass > .cardimg         { background-position: -800% -200%; }

.card.schilte.sechs > .cardimg      { background-position:    0% -300%; }
.card.schilte.sieben > .cardimg     { background-position: -100% -300%; }
.card.schilte.acht > .cardimg       { background-position: -200% -300%; }
.card.schilte.neun > .cardimg       { background-position: -300% -300%; }
.card.schilte.zehn > .cardimg       { background-position: -400% -300%; }
.card.schilte.under > .cardimg      { background-position: -500% -300%; }
.card.schilte.ober > .cardimg       { background-position: -600% -300%; }
.card.schilte.koenig > .cardimg     { background-position: -700% -300%; }
.card.schilte.ass > .cardimg        { background-position: -800% -300%; }